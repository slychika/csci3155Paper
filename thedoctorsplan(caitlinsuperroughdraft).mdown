One of the main criticisms of generics is that they are unnecessary and unnecessarily complicated.  Ken Arnold, a blogger with Java.net, commented that the Java community had survived without generics for more than five years, and that the complexity they added outweighs the benefits of having them.  His main argument is that while generics seem simple enough, there are certain very specific instances in which they should not be used, and those instances are difficult to understand.    Additionally, a blogger on facsim.org argues that generics are basically a waste because they provide the same output as code without generics.  This blogger also commented that the Java compiler removes all traces of generics, essentially leaving the code as it would have been had you coded without them in the first place.  This is referred to as erasure, and has other side-effects that may be unwanted.  As an example, with type erasure, a List<string> would be converted to type List at compile-time.  Another problem is that generics are not covariant.  This means that a subtype of a class cannot be substituted for an object of that class in a generics setting.  This also means that generics do not interact well with Arrays and ArrayLists because they are covariant. 